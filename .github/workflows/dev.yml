name: Java CI/CD with Gradle

on:
  push:
    branches: [ "main","dev" ]
  pull_request:
    branches: [ "main","dev" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Run Tests and Build
        run: ./gradlew test build

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build/libs/*SNAPSHOT.jar

  docker-image-upload:
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, 'skip deploy') &&
      !contains(github.event.pull_request.body, 'skip deploy')
    needs: build-and-test
    steps:
      - uses: actions/checkout@v3.3.0

      - name: Build app module
        run: ./gradlew clean build -Dspring.profiles.active=dev

      - name: Build app Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/ajouway-dev:latest .

      - name: login to docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/ajouway-dev:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker-image-upload
    steps:
      - uses: actions/checkout@v3.3.0

      - name: execute remote ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_AWS_EC2_HOST }}
          username: ${{ secrets.DEV_AWS_EC2_USERNAME }}
          key: ${{ secrets.DEV_AWS_EC2_SSH_KEY }}
          port: 22
          script: |
            cd /home/ubuntu/workspace
            [ -f .env ] && rm .env
            touch .env
            echo "SPRING_JPA_DDL_AUTO=${{ secrets.SPRING_JPA_DDL_AUTO }}" >> .env
            echo "POSTGRESQL_USER=admin" >> .env
            echo "POSTGRESQL_PASSWORD=${{ secrets.POSTGRESQL_PASSWORD }}" >> .env
            echo "SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_db:5432/ajou_way" >> .env
            echo "SPRING_DATASOURCE_USERNAME=admin" >> .env
            echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.POSTGRESQL_PASSWORD }}" >> .env
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            docker-compose down -v
            docker images -q ajouwaydev/ajouway-dev:latest | grep -q . && docker rmi ajouwaydev/ajouway-dev:latest
            docker-compose up -d
